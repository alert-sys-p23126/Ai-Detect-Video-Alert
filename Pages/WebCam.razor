@page "/webcam"

@using Azure.Storage.Blobs;

@inject IJSRuntime JSRuntime
@inject IConfiguration Configuration

<h3>WebCam</h3>

<div>
    <h2>Camera Preview</h2>
    <video id="videoFeed" width="480" height="360" />
    <canvas class="d-none" id="currentFrame" width="480" height="360" />
    <div>
        <p>
            <button @onclick="StartCapture">Start Video</button>
            <button @onclick="CaptureFrame">Capture Frame</button>
            <button @onclick="StopCapture">Stop Video</button>
            <button @onclick="UploadCapture">Upload Capture</button>
        </p>
    </div>
    <div>@infoText</div>
</div>

<h3> Capture Last Frame</h3>
<div>
    @if (!string.IsNullOrEmpty(frameUri))
    {
        <img src="@frameUri" />
    }
</div>

@code {
    private string? frameUri;
    public byte[]? uploadedImageBytes;
    public string infoText = "";
    private string? connectionString;
    private string? containerName;

    protected override void OnInitialized()
    {
        connectionString = Configuration["ConnectionStrings:AzureBlobStorage"];
        containerName = Configuration["AzureBlobStorage:ContainerName"];

        // Now you can use these in your UploadCapture method
    }
    private async Task StartCapture()
    {
        try
        {
            await JSRuntime.InvokeVoidAsync("startVideo", "videoFeed");
        }
        catch (Exception ex)
        {
            // Handle exception
            Console.WriteLine($"An error occurred: {ex.Message}");
        }
    }

    private async Task CaptureFrame()
    {
        await JSRuntime.InvokeAsync<String>("getFrame", "videoFeed", "currentFrame", DotNetObjectReference.Create(this));
    }

    [JSInvokable]
    public void ProcessImage(string imageString)
    {
        try
        {
            frameUri = imageString;
            StateHasChanged(); // Notify Blazor to update the UI
        }
        catch (FormatException ex)
        {
            // Handle the invalid base64 data gracefully
            Console.WriteLine($"Invalid base64 data: {ex.Message}");
        }
    }


    private async Task UploadCapture()
    {
        string blobName = Guid.NewGuid().ToString() + ".png"; // Choose a unique name for your blob

        // Replace with your actual Base64 image data
        if (frameUri != null)
        {
            try
            {
                byte[] imageBytes = Convert.FromBase64String(frameUri.Split(',')[1]).ToArray();
                //byte[] imageBytes = Convert.FromBase64String(frameUri).ToArray();

                BlobServiceClient blobServiceClient = new BlobServiceClient(connectionString);
                BlobContainerClient containerClient = blobServiceClient.GetBlobContainerClient(containerName);
                BlobClient blobClient = containerClient.GetBlobClient(blobName);

                using (MemoryStream stream = new MemoryStream(imageBytes))
                {
                    await blobClient.UploadAsync(stream);
                    infoText = $"Uploaded image {blobName} to Azure Blob Storage.";
                    Console.WriteLine(infoText);
                }
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Error uploading image to Azure Blob Storage: {ex.Message}");
            }
        }
    }

    private async Task StopCapture()
    {
        await JSRuntime.InvokeVoidAsync("stopCapture", "videoFeed");
    }
}