@page "/webcam"

@using Azure.Storage.Blobs;

@inject IJSRuntime JSRuntime

<h3>WebCam</h3>

<div>
    <h2>Camera Preview</h2>
    <video id="videoFeed" width="320" height="240" />
    <canvas class="d-none" id="currentFrame" width="320" height="240" />
    <p>
        <button @onclick="CaptureFrame">Start Capture</button>
        <button @onclick="UploadCapture">Upload Capture</button>
    </p>
    <div>@infoText</div>
    <h2>Last Frame</h2>
    
</div>

<h1> Capture Last Frame</h1>
<div>
    @if (!string.IsNullOrEmpty(frameUri))
    {
        <img src="@frameUri" />
    }
</div>

<script src="webcam.js"></script>

@code {
    private string? frameUri;
    public byte[]? uploadedImageBytes;
    public string infoText = "";

    private bool firstRender = true;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            this.firstRender = false;
            try
            {
                await JSRuntime.InvokeVoidAsync("startVideo", "videoFeed");
            }
            catch (Exception ex)
            {
                // Handle exception
                Console.WriteLine($"An error occurred: {ex.Message}");
            }
        }
    }

    private async Task CaptureFrame()
    {
        await JSRuntime.InvokeAsync<String>("getFrame", "videoFeed", "currentFrame", DotNetObjectReference.Create(this));
    }

    [JSInvokable]
    public void ProcessImage(string imageString)
    {
        try
        {
            frameUri = imageString;
            StateHasChanged(); // Notify Blazor to update the UI
        }
        catch (FormatException ex)
        {
            // Handle the invalid base64 data gracefully
            Console.WriteLine($"Invalid base64 data: {ex.Message}");
        }
    }


    private async Task UploadCapture()
    {
        string connectionString = "DefaultEndpointsProtocol=https;AccountName=aialertblob;AccountKey=UZV2yG536PFC2qu2kIIfonIgHXmA3nTmIGJlgOoLBF8WJUr9LsDBZ2k4KDmuhUaWH6QohEDE3XIT+AStqD7q/Q==;EndpointSuffix=core.windows.net";
        string containerName = "screengrab";
        string blobName = Guid.NewGuid().ToString() + ".png"; // Choose a unique name for your blob
                                                              // string base64Image = $"";
                                                              // Replace with your actual Base64 image data

        if (frameUri != null)
        {
            try
            {
                byte[] imageBytes = Convert.FromBase64String(frameUri.Split(',')[1]).ToArray();
                //byte[] imageBytes = Convert.FromBase64String(frameUri).ToArray();

                BlobServiceClient blobServiceClient = new BlobServiceClient(connectionString);
                BlobContainerClient containerClient = blobServiceClient.GetBlobContainerClient(containerName);
                BlobClient blobClient = containerClient.GetBlobClient(blobName);

                using (MemoryStream stream = new MemoryStream(imageBytes))
                {
                    await blobClient.UploadAsync(stream);
                    infoText = $"Uploaded image {blobName} to Azure Blob Storage.";
                    Console.WriteLine(infoText);
                }
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Error uploading image to Azure Blob Storage: {ex.Message}");
            }
        }
    }

    private void StopCapture()
    {
        // Add your stop capture logic here
    }
}